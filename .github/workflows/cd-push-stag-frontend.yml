name: cd-push-stag-frontend
on: 
    push: 
        branches: [staging] 
        paths: ['./frontend']
    workflow_dispatch:
jobs: 
    build-docker-image: 
        runs-on: self-hosted 
        steps: 
            - name: checkout code 
              uses: actions/checkout@v5

            - name: build docker image 
              uses: docker/build-push-action@v6
              with: 
                context: ./frontend
                file: ./frontend/Dockerfile
                tags: |
                    frontend-image:staging
                    frontend-image:${{ github.sha }}
                push: false 
                cache-from: type=local,src=/tmp/.buildx-cache
                cache-to: type=local,dest=/tmp/.buildx-cache-new

            - name: transfer new cache 
              run: |
                rm -rf /tmp/.buildx-cache 
                mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    run-docker-compose: 
      runs-on: self-hosted 
      needs: build-docker-image
      environment: staging
      steps: 
        - name: checkout code 
          uses: actions/checkout@v5

        - name: create .env file 
          run: | 
            cat <<EOF > ./backend/src/.env
            JWTSettings__SecretKey=${{ secrets.JWTSETTINGS__SECRETKEY }}
            JWTSettings__Issuer=${{ secrets.JWTSETTINGS__ISSUER }}
            JWTSettings__ExpirationMinutes=${{ secrets.JWTSETTINGS__EXPIRATIONMINUTES }}
            JWTSettings__Audience=${{ secrets.JWTSETTINGS__AUDIENCE }}
            ConnectionStrings__DefaultConnection=${{ secrets.CONNECTIONSTRINGS__DEFAULTCONNECTION }}
            Admin__Password=${{ secrets.ADMIN__PASSWORD }}
            EOF

        - name: run docker compose with built image 
          run: docker compose up -d

        - name: backend health check 
          id: backend-health-check
          continue-on-error: true
          run: | 
            echo "Performing healthcheck on backend"
            max_attempts=10
            attempt=1
            while [$attempt -le $max_attempts]; do
              if curl -f http://localhost:5000/health; then 
                echo "Backend service is ready"
                exit 0
              fi 
              echo "Attempt: $attemp/$max_attempts: Backend not ready yet"
              sleep 2
              $attempt=$((attempt+1))
            done 
            echo "Backend failed to start"
            exit 1

        - name: frontend health check 
          id: frontend-health-check 
          continue-on-error: true
          run: |
            echo "Performing healthcheck on frontend"
            max_attempts=10
            attempt=1
            while [$attempt -le $max_attemps]; do 
              if curl -f http://localhost:80 > /dev/null 2>&1; then 
                echo "Frontend service is ready"
                exit 0
              fi 
              echo "Attempt: $attemp/$max_attempts: Frontend not ready yet"
              sleep 2
              $attempt=$((attempt+1))
            done

            echo "Frontend failed to start"
            exit 1

        - name: Shut down container 
          if: steps.backend-health-check.outcome == 'failure' || steps.frontend-health-check.outcome == 'failure'
          run: docker compose down 