name: cd-push-prod-backend-frontend

on: 
    # push: 
    #     branches: [main] 
    #     paths: ['./backend'] disabling this for now since we're still in development
    workflow_dispatch:

jobs: 
    build-and-push-image: 
        runs-on: [ubuntu-latest]
        environment: production
        steps: 
            - name: checkout code 
              uses: actions/checkout@v5

            - name: setup buildx 
              uses: docker/setup-buildx-action@v3

            - name: login into dockerhub
              uses: docker/login-action@v3
              with: 
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

            - name: build backend docker image 
              uses: docker/build-push-action@v6
              with: 
                context: ./backend/src
                file: ./backend/src/Dockerfile
                tags: | 
                  ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
                  ${{ secrets.DOCKERHUB_USERNAME }}/backend:${{ github.sha }}
                push: true
                cache-from: type=gha
                cache-to: type=gha,mode=max 

            - name: build frontend docker image 
              uses: docker/build-push-action@v6
              with: 
                context: ./frontend
                file: ./frontend/Dockerfile
                tags: | 
                  ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
                  ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }}
                push: true
                cache-from: type=gha
                cache-to: type=gha,mode=max 
              
            

            - name: logout dockerhub
              run: docker logout 

    setup-terraform-and-build-plan: 
      runs-on: ubuntu-latest 
      environment: production
      needs: build-and-push-image
      outputs: 
        tfPlanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      steps: 
        - name: checkout code 
          uses: actions/checkout@v5

        - name: Configure AWS credentials 
          uses: aws-actions/configure-aws-credentials@v5
          with: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with: 
            terraform_version: 1.13.4

        - name: Initialize Terraform 
          run: terraform init 
          working-directory: ./terraform/environment/production

        - name: Terraform plan 
          id: tf-plan 
          env: 
            TF_VAR_cluster_name: ${{ vars.TF_VAR_CLUSTER_NAME }}
            TF_VAR_tags: ${{ vars.TF_VAR_TAGS }}
            TF_VAR_task_definition_family: ${{ vars.TF_VAR_TASK_DEFINITION_FAMILY }}
            TF_VAR_github_sha: ${{ github.sha }}
            TF_VAR_ecs_service_name: ${{ vars.TF_VAR_ECS_SERVICE_NAME }}
            TF_VAR_ecs_service_desired_count: ${{ vars.TF_VAR_ECS_DESIRED_COUNT }}
          run: |
            export exitcode=0
            echo "Running terraform plan"
            terraform plan -detailed-exitcode -no-color -out=tfplan || export exitcode=$?
            echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
            if [ $exitcode -eq 1 ]; then 
              echo "Terraform plan failed!"
              exit 1
            fi
            exit 0
          working-directory: ./terraform/environment/production

        - name: Upload tf plan artifact 
          uses: actions/upload-artifact@v4
          with: 
            name: tfPlan 
            path: ./terraform/environment/production/tfplan

    terraform-apply: 
      runs-on: ubuntu-latest
      environment: production
      needs: setup-terraform-and-build-plan
      # TODO: to change this into exit code == 2 only
      if: needs.setup-terraform-and-build-plan.outputs.tfPlanExitCode == 2 || needs.setup-terraform-and-build-plan.outputs.tfPlanExitCode == 0
      steps: 
        - name: Checkout code
          uses: actions/checkout@v5

        - name: Configure AWS credentials 
          uses: aws-actions/configure-aws-credentials@v5
          with: 
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with: 
            terraform_version: 1.13.4

        - name: Initialize Terraform 
          run: terraform init 
          working-directory: ./terraform/environment/production

        - name: Download tfplan artifact
          uses: actions/download-artifact@v5
          with: 
            name: tfPlan
            path: ./terraform/environment/production

        - name: Terraform apply 
          run: |
            echo "Terraform apply..."
            terraform apply -auto-approve tfplan 
          working-directory: ./terraform/environment/production

        - name: Waiting for deployment to complete
          run: |
            CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)
            SERVICE_NAME=$(terraform output -raw ecs_service_name)
            echo "Checking deployment on cluster $CLUSTER_NAME with service $SERVICE_NAME..."
            aws ecs wait services-stable \
              --cluster $CLUSTER_NAME \
              --services $SERVICE_NAME 
            echo "Service is now stable. Deployment complete"
            aws describe-services \
              --cluster $CLUSTER_NAME \
              --services $SERVICE_NAME \
              --query 'services[0].deployments' \
              --output table 
          working-directory: ./terraform/environment/production




            

        
