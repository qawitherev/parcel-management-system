// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParcelManagement.Infrastructure.Database;

#nullable disable

namespace ParcelManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818144357_ForeignKeyInit")]
    partial class ForeignKeyInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ParcelManagement.Core.Entities.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Dimensions")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("ExitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResidentUnitDeprecated")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("ResidentUnitId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ResidentUnitId");

                    b.HasIndex("TrackingNumber")
                        .IsUnique();

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.ResidentUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("ResidentUnit");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResidentUnitDeprecated")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.UserResidentUnit", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResidentUnitId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId", "ResidentUnitId");

                    b.HasIndex("ResidentUnitId");

                    b.ToTable("UserResidentUnit");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.Parcel", b =>
                {
                    b.HasOne("ParcelManagement.Core.Entities.ResidentUnit", "ResidentUnit")
                        .WithMany("Parcels")
                        .HasForeignKey("ResidentUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentUnit");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.UserResidentUnit", b =>
                {
                    b.HasOne("ParcelManagement.Core.Entities.ResidentUnit", "ResidentUnit")
                        .WithMany("UserResidentUnits")
                        .HasForeignKey("ResidentUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelManagement.Core.Entities.User", "User")
                        .WithMany("UserResidentUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResidentUnit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.ResidentUnit", b =>
                {
                    b.Navigation("Parcels");

                    b.Navigation("UserResidentUnits");
                });

            modelBuilder.Entity("ParcelManagement.Core.Entities.User", b =>
                {
                    b.Navigation("UserResidentUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
